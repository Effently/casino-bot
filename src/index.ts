import {
  Client, GatewayIntentBits, Partials, Events, REST, Routes,
  SlashCommandBuilder, Interaction, EmbedBuilder
} from 'discord.js';
import { config } from 'dotenv';
import {
  initDB, getPoints, addPoints, getLastDaily,
  setLastDaily, getTopUsers, ensureUserExists
} from './db';

config();

const MIN_BET = 500;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions
  ],
  partials: [Partials.Message, Partials.Reaction, Partials.User]
});

const commands = [
  new SlashCommandBuilder().setName('balance').setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤'),
  new SlashCommandBuilder().setName('casino').setDescription('–ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ')
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('leaderboard').setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤'),
  new SlashCommandBuilder().setName('daily').setDescription('–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å'),
  new SlashCommandBuilder().setName('roulette').setDescription('–†—É–ª–µ—Ç–∫–∞: –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤—å')
    .addStringOption(opt => opt.setName('color').setDescription('–¶–≤–µ—Ç').setRequired(true)
      .addChoices(
        { name: '–ö—Ä–∞—Å–Ω—ã–π', value: 'red' },
        { name: '–ß—ë—Ä–Ω—ã–π', value: 'black' },
        { name: '–ó–µ–ª—ë–Ω—ã–π', value: 'green' }))
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true)),
  new SlashCommandBuilder().setName('dice').setDescription('–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏')
    .addIntegerOption(opt => opt.setName('amount').setDescription('–°—Ç–∞–≤–∫–∞').setRequired(true))
].map(c => c.toJSON());

async function registerCommands() {
  const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN!);
  await rest.put(Routes.applicationCommands(process.env.CLIENT_ID!), { body: commands });
}

client.once(Events.ClientReady, async () => {
  console.log(`Logged in as ${client.user?.tag}`);
  await initDB();
  await registerCommands();
});

client.on(Events.MessageCreate, async (message) => {
  if (message.author.bot) return;
  await ensureUserExists(message.author.id);
  if (Math.random() < 0.5) {
    const pts = Math.floor(Math.random() * 5) + 1;
    await addPoints(message.author.id, pts);
  }
});

client.on(Events.MessageReactionAdd, async (reaction, user) => {
  if (user.bot || !reaction.message.author || reaction.message.author.id === user.id) return;
  await ensureUserExists(reaction.message.author.id);
  await addPoints(reaction.message.author.id, 1);
});

client.on(Events.InteractionCreate, async (interaction: Interaction) => {
  if (!interaction.isChatInputCommand()) return;

  const userId = interaction.user.id;
  await ensureUserExists(userId);

  if (interaction.commandName === 'balance') {
    const points = await getPoints(userId);
    await interaction.reply({ embeds: [new EmbedBuilder()
      .setTitle('–ë–∞–ª–∞–Ω—Å')
      .setDescription(`–£ —Ç–µ–±—è ${points} –æ—á–∫–æ–≤`)
      .setColor('Blue')] });
  }

  else if (interaction.commandName === 'daily') {
    const last = await getLastDaily(userId);
    const now = Date.now();

    if (last && now - last < 86400000) {
      const left = 86400000 - (now - last);
      const hours = Math.floor(left / 3600000);
      const minutes = Math.floor((left % 3600000) / 60000);
      await interaction.reply({ content: `–£–∂–µ –ø–æ–ª—É—á–∞–ª. –ñ–¥–∏ ${hours}—á ${minutes}–º`, ephemeral: true });
      return;
    }

    const bonus = 100 + Math.floor(Math.random() * 50);
    await addPoints(userId, bonus);
    await setLastDaily(userId, now);

    await interaction.reply({ embeds: [new EmbedBuilder()
      .setTitle('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å')
      .setDescription(`+${bonus} –æ—á–∫–æ–≤!`)
      .setColor('Green')] });
  }

  else if (interaction.commandName === 'leaderboard') {
    const top = await getTopUsers(10);
    const embed = new EmbedBuilder().setTitle('–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤').setColor('Gold');
    top.forEach((u, i) => embed.addFields({ name: `${i + 1}.`, value: `<@${u.id}> ‚Äî ${u.points} –æ—á–∫–æ–≤` }));
    await interaction.reply({ embeds: [embed] });
  }

  else if (['casino', 'roulette', 'dice'].includes(interaction.commandName)) {
    const bet = interaction.options.getInteger('amount', true);
    const balance = await getPoints(userId);

    if (bet < MIN_BET) {
      await interaction.reply({ content: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${MIN_BET} –æ—á–∫–æ–≤`, ephemeral: true });
      return;
    }
    if (balance < bet) {
      await interaction.reply({ content: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤.', ephemeral: true });
      return;
    }

    if (interaction.commandName === 'casino') {
      const chances = [
        { multiplier: 0, chance: 0.4 },
        { multiplier: 0.5, chance: 0.25 },
        { multiplier: 1, chance: 0.2 },
        { multiplier: 2, chance: 0.1 },
        { multiplier: 5, chance: 0.04 },
        { multiplier: 10, chance: 0.01 }
      ];
      let roll = Math.random(), acc = 0, multiplier = 0;
      for (const c of chances) {
        acc += c.chance;
        if (roll <= acc) { multiplier = c.multiplier; break; }
      }
      const win = Math.floor(bet * multiplier);
      await addPoints(userId, win - bet);

      const result = win > bet ? `üéâ –í—ã–∏–≥—Ä—ã—à: ${win - bet} –æ—á–∫–æ–≤!` :
        win === bet ? '–ù–∏—á—å—è, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.' :
        `–ü—Ä–æ–∏–≥—Ä—ã—à: ${bet - win} –æ—á–∫–æ–≤.`;

      await interaction.reply({ embeds: [new EmbedBuilder()
        .setTitle('–ö–∞–∑–∏–Ω–æ')
        .setDescription(`–°—Ç–∞–≤–∫–∞: ${bet}\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}x\n${result}`)
        .setColor(win > bet ? 'Green' : win === bet ? 'Yellow' : 'Red')] });
    }

else if (interaction.commandName === 'roulette') {
  const bet = interaction.options.getInteger('amount', true);
  const color = interaction.options.getString('color', true);
  const balance = await getPoints(userId);

  if (bet < 500) {
    await interaction.reply({ content: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 500 –æ—á–∫–æ–≤.', ephemeral: true });
    return;
  }

  if (balance < bet) {
    await interaction.reply({ content: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.', ephemeral: true });
    return;
  }

  const wheel = Math.random();
  let resultColor = 'black';

  if (wheel < 0.027) resultColor = 'green';
  else if (wheel < 0.027 + 0.4865) resultColor = 'red';
  else resultColor = 'black';

  let multiplier = 0;
  if (color === resultColor) {
    multiplier = (color === 'green') ? 14 : 2;
  }

  const winnings = Math.floor(bet * multiplier);
  const netChange = winnings - bet;

  await addPoints(userId, netChange); // üí∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

  const embed = new EmbedBuilder()
    .setTitle('–†—É–ª–µ—Ç–∫–∞')
    .setDescription(
      `–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª: ${bet} –æ—á–∫–æ–≤ –Ω–∞ ${color}\n–í—ã–ø–∞–ª–æ: ${resultColor}\n` +
      (multiplier > 0
        ? `üéâ –í—ã–∏–≥—Ä—ã—à: ${winnings} –æ—á–∫–æ–≤!`
        : `–ü—Ä–æ–∏–≥—Ä—ã—à: ${bet} –æ—á–∫–æ–≤.`)
    )
    .setColor(multiplier > 0 ? 'Green' : 'Red');

  await interaction.reply({ embeds: [embed] });
}

    else if (interaction.commandName === 'dice') {
      const roll1 = Math.floor(Math.random() * 6) + 1;
      const roll2 = Math.floor(Math.random() * 6) + 1;
      const sum = roll1 + roll2;
      let multiplier = 0;
      if (sum > 7) multiplier = 2;
      else if (sum === 7) multiplier = 1;

      const win = Math.floor(bet * multiplier);
      await addPoints(userId, win - bet);
      await interaction.reply({ embeds: [new EmbedBuilder()
        .setTitle('–ö–æ—Å—Ç–∏')
        .setDescription(`–ë—Ä–æ—Å–æ–∫: ${roll1} –∏ ${roll2} (—Å—É–º–º–∞ ${sum})\n${multiplier ? `üéâ –í—ã–∏–≥—Ä—ã—à: ${win - bet} –æ—á–∫–æ–≤!` : `–ü—Ä–æ–∏–≥—Ä—ã—à: ${bet} –æ—á–∫–æ–≤.`}`)
        .setColor(multiplier ? 'Green' : 'Red')] });
    }
  }
});

client.login(process.env.BOT_TOKEN);
